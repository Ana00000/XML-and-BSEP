version: "3.8"
services:

  gateway:
    restart: on-failure
    image: nginx:1.19.8-alpine
    ports:
      - "8080:8080"
      - "443:443"
    networks:
      - backend
    volumes:
      - ./Nistagram/gateway/nginx.conf:/etc/nginx/nginx.conf
      - ./Nistagram/gateway/api_gateway.conf:/etc/nginx/api_gateway.conf
      - ./Nistagram/gateway/localhost.cer:/etc/ssl/localhost.cer
      - ./Nistagram/gateway/localhost.pem:/etc/ssl/localhost.pem

  db:
    image:  eu.gcr.io/nistagram/postgres-multi-db:compose_build
    build:
      context: ./Database
      dockerfile: Dockerfile
    restart: always
    networks:
      - backend
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root


  front:
    image: front:compose_build
    build:
      context: ./Nistagram-frontend
      dockerfile: Dockerfile
    command: npm run serve -- --port 8081
    restart: on-failure
    ports:
      - "8081:8081"
    volumes:
      - ./Nistagram-frontend:/Nistagram-frontend
      - node_modules:/Nistagram-frontend/node_modules
      - ./Nistagram/gateway/localhost.cer:/etc/ssl/localhost.cer
      - ./Nistagram/gateway/localhost.pem:/etc/ssl/localhost.pem
      - "./content-images:/app/public/uploads"
    environment:
      FRONTEND_PORT: 8081
      BASE_URL: '/app/public/uploads'
    depends_on:
      - gateway
    networks:
      - backend


  campaign-service:
    restart: on-failure
    image: campaign-service:compose_build
    ports:
      - "8082:8082"
    build:
      context: ./Nistagram/campaign-service
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      PORT: 8082
      DBHOST: db
      USER: postgres
      PASSWORD: root
      DBNAME: campaigndb
      DBPORT: 5432
    depends_on:
      - db

  content-service:
    restart: on-failure
    image: content-service:compose_build
    build:
      context: ./Nistagram/content-service
      dockerfile: Dockerfile
    networks:
      - backend
    ports:
      - "8083:8083"
    environment:
      PORT: 8083
      DBHOST: db
      USER: postgres
      PASSWORD: root
      DBNAME: contentdb
      DBPORT: 5432
      BASE_URL: '/app/public/uploads'
    depends_on:
      - db
    volumes:
      - "./content-images:/app/public/uploads"

  location-service:
    restart: on-failure
    image: location-service:compose_build
    build:
      context: ./Nistagram/location-service
      dockerfile: Dockerfile
    networks:
      - backend
    ports:
      - "8084:8084"
    environment:
      PORT: 8084
      DBHOST: db
      USER: postgres
      PASSWORD: root
      DBNAME: locationdb
      DBPORT: 5432
    depends_on:
      - db

  message-service:
    restart: on-failure
    image: message-service:compose_build
    build:
      context: ./Nistagram/message-service
      dockerfile: Dockerfile
    networks:
      - backend
    ports:
      - "8085:8085"
    environment:
      PORT: 8086
      DBHOST: db
      USER: postgres
      PASSWORD: root
      DBNAME: messagedb
      DBPORT: 5432
    depends_on:
      - db

  post-service:
    restart: on-failure
    image: post-service:compose_build
    build:
      context: ./Nistagram/post-service
      dockerfile: Dockerfile
    networks:
      - backend
    ports:
      - "8086:8086"
    environment:
      PORT: 8086
      DBHOST: db
      USER: postgres
      PASSWORD: root
      DBNAME: postdb
      DBPORT: 5432
      SETTINGS_SERVICE_DOMAIN: settings-service
      SETTINGS_SERVICE_PORT: 8088
      TAG_SERVICE_DOMAIN: tag-service
      TAG_SERVICE_PORT: 8090
      USER_SERVICE_DOMAIN: user-service
      USER_SERVICE_PORT: 8091
      CONTENT_SERVICE_DOMAIN: content-service
      CONTENT_SERVICE_PORT: 8083
      LOCATION_SERVICE_DOMAIN: location-service
      LOCATION_SERVICE_PORT: 8084
    depends_on:
      - db

  requests-service:
    restart: on-failure
    image: requests-service:compose_build
    build:
      context: ./Nistagram/requests-service
      dockerfile: Dockerfile
    networks:
      - backend
    ports:
      - "8087:8087"
    environment:
      PORT: 8087
      DBHOST: db
      USER: postgres
      PASSWORD: root
      DBNAME: requestsdb
      DBPORT: 5432
    depends_on:
      - db

  settings-service:
    restart: on-failure
    image: settings-service:compose_build
    build:
      context: ./Nistagram/settings-service
      dockerfile: Dockerfile
    networks:
      - backend
    ports:
      - "8088:8088"
    environment:
      PORT: 8088
      DBHOST: db
      USER: postgres
      PASSWORD: root
      DBNAME: settingsdb
      DBPORT: 5432
    depends_on:
      - db

  story-service:
    restart: on-failure
    image: story-service:compose_build
    build:
      context: ./Nistagram/story-service
      dockerfile: Dockerfile
    networks:
      - backend
    ports:
      - "8089:8089"
    environment:
      PORT: 8089
      DBHOST: db
      USER: postgres
      PASSWORD: root
      DBNAME: storydb
      DBPORT: 5432
      SETTINGS_SERVICE_DOMAIN: settings-service
      SETTINGS_SERVICE_PORT: 8088
      TAG_SERVICE_DOMAIN: tag-service
      TAG_SERVICE_PORT: 8090
      USER_SERVICE_DOMAIN: user-service
      USER_SERVICE_PORT: 8091
      CONTENT_SERVICE_DOMAIN: content-service
      CONTENT_SERVICE_PORT: 8083
      LOCATION_SERVICE_DOMAIN: location-service
      LOCATION_SERVICE_PORT: 8084
    depends_on:
      - db

  tag-service:
    restart: on-failure
    image: tag-service:compose_build
    build:
      context: ./Nistagram/tag-service
      dockerfile: Dockerfile
    networks:
      - backend
    ports:
      - "8090:8090"
    environment:
      PORT: 8090
      DBHOST: db
      USER: postgres
      PASSWORD: root
      DBNAME: tagdb
      DBPORT: 5432
      SETTINGS_SERVICE_DOMAIN: settings-service
      SETTINGS_SERVICE_PORT: 8088
      USER_SERVICE_DOMAIN: user-service
      USER_SERVICE_PORT: 8091
    depends_on:
      - db

  user-service:
    restart: on-failure
    image: user-service:compose_build
    build:
      context: ./Nistagram/user-service
      dockerfile: Dockerfile
    networks:
      - backend
    ports:
      - "8091:8091"
    environment:
      PORT: 8091
      DBHOST: db
      USER: postgres
      PASSWORD: root
      DBNAME: userdb
      DBPORT: 5432
      SETTINGS_SERVICE_DOMAIN: settings-service
      SETTINGS_SERVICE_PORT: 8088
      REQUESTS_SERVICE_DOMAIN: requests-service
      REQUESTS_SERVICE_PORT: 8087
      TAG_SERVICE_DOMAIN: tag-service
      TAG_SERVICE_PORT: 8090
    depends_on:
      - db

volumes:
  node_modules:
  content-images:

networks:
  backend:
    name: Nistagram
    driver: bridge